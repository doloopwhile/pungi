#!/bin/bash
set -euC
cd "$(dirname "$0")/../../"

usage() {
  "$(dirname "$0")/help" install
}

pyenv_required() {
  echo 'pyenv command is required.'
  echo 'For pyenv information, see: https://github.com/pyenv/pyenv'
}

appdir_exists() {
  echo -n "apps/$name/ already created. Recreate? [Y/N] "
}

latest_python_version() {
  pyenv install -l | tr -d ' ' | grep '^[0-9]\+\.[0-9]\+\.[0-9]\+$' | sort -n | tail -1
}

version_spec=''
name=''
python_version=''
recreate=''

while [ $# -gt 0 ]; do
  case "$1" in
    '-h' | '--help')
      usage && exit
    ;;
    '-v' )
      shift
      version_spec="==$1"
      shift
    ;;
    '--name' )
      shift
      name="$1"
      shift
    ;;
    '-p' )
      shift
      python_version="$1"
      shift
    ;;
    '-f' )
      shift
      recreate=1
    ;;
    * )
      break
    ;;
  esac
done

if [ $# -ne 1 ]; then
  usage >&2
  exit -1
fi
pkg="$1"

if ! command -v pyenv > /dev/null; then
  pyenv_required >&2
  exit -1
fi

if [ -z "$python_version" ]; then
  python_version="$(latest_python_version)"
fi

if [ -z "$name" ]; then
  name="$pkg"
fi

if ! ( pyenv versions --bare | grep "$python_version" > /dev/null ); then
  pyenv install "$python_version"
fi

if [ -z "${PYENV_ROOT:-}" ]; then
  pyenv_root="${HOME}/.pyenv"
else
  pyenv_root="${PYENV_ROOT%/}"
fi

if [ -e "apps/$name/" ]; then
  if [ -n "$recreate" ]; then
    :
  else
    appdir_exists
    while read -r line; do
      line=$(echo "$line" | tr -d ' ')
      if [ "$line" = Y ]; then
        break
      elif [ "$line" = N ]; then
        exit -1
      fi
      appdir_exists
    done
  fi
fi

echo "Creating virtual environment(apps/$name/python)..."
rm -rf "apps/$name/"
mkdir -p "apps/$name/"
"$pyenv_root/versions/$python_version/bin/python" -m venv "apps/$name/python" > /dev/null

cd "apps/$name"

interpreter_commands=($(find python/bin -mindepth 1 -exec basename {} \;))

echo "Installing package($pkg$version_spec)..."
python/bin/pip install "$pkg$version_spec" > /dev/null 2>&1

echo "Creating hardlinks(apps/$name/bin)..."
mkdir -p "bin/"
cat <<"EOS" | python/bin/python - "$pkg"
import sys
import os
from os.path import join
from pkg_resources import get_entry_map

console_scripts = get_entry_map(sys.argv[1]).get('console_scripts')
if console_scripts:
  for name in console_scripts.keys():
    os.link(join('python', 'bin', name), join('bin', name))
    print("Created", name)
EOS

for f in $(find python/bin -mindepth 1 -exec basename {} \;); do
  if [ -e "bin/$f" ]; then
    continue
  fi

  ignore=
  for interpreter_command in "${interpreter_commands[@]}"; do
    if [ "$f" = "$interpreter_command" ]; then
      ignore=1
      break
    fi
  done

  if [ -n "$ignore" ]; then
    continue
  fi

  echo "'$f' is created while installing package."
  echo "For creating link, run: pungi ln $name $f"
  echo
done

